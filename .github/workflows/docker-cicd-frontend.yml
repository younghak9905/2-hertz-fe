name: Frontend Docker CI/CD

on:
  pull_request:
    types: [closed]
    branches:
      - main
      - develop
    paths-ignore:
      - ".github/workflows/cicd-frontend.yml"

  workflow_dispatch:
    inputs:
      env:
        description: "배포 환경 선택"
        required: true
        default: "브랜치를 확인해주세요!"
        type: choice
        options:
          - main
          - develop

jobs:
  frontend-ci:
    if: github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true
    outputs:
      BRANCH: ${{ steps.generate-tags.outputs.BRANCH }}
      SHORT_SHA: ${{ steps.generate-tags.outputs.SHORT_SHA }}
      FULL_IMAGE: ${{ steps.generate-tags.outputs.FULL_IMAGE }}
    runs-on: ubuntu-latest
    steps:
      # ✅ act 테스트용 명령어: act workflow_dispatch -W .github/workflows/docker-cicd-frontend.yml -P ubuntu-latest=docker.io/ddongu/act-runner-terraform:latest
      # 1. 소스 코드 Checkout
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      # 2. AWS 인증
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # 3. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set environment variables from SSM
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }
          BRANCH="${{ github.ref_name }}"
          if [[ "$BRANCH" == "main" ]]; then
            load_param "/global/nextjs/prod/NEXT_PUBLIC_API_BASE_URL" NEXT_PUBLIC_API_BASE_URL
          else
            load_param "/global/nextjs/dev/NEXT_PUBLIC_API_BASE_URL" NEXT_PUBLIC_API_BASE_URL
          fi


      # 4. 태그 정보 생성
      - name: Generate image tags
        id: generate-tags
        run: |
          BRANCH="${{ github.ref_name }}"
          SANITIZED_BRANCH="${BRANCH//\//-}"
          SANITIZED_BRANCH=$(echo "$SANITIZED_BRANCH" | sed 's#[^a-zA-Z0-9_.-]#-#g')
          BRANCH="$SANITIZED_BRANCH"
          SHORT_SHA=$(echo "${{ github.sha }}" | cut -c1-7)
          IMAGE_TAG="${BRANCH}-${SHORT_SHA}"

          # if [ "$BRANCH" = "main" ]; then
          #   ENV_TAG="main-latest"
          # else
          #   ENV_TAG="develop-latest"
          # fi
          ENV_TAG="develop-latest"

          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_ENV
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_ENV
          echo "ENV_TAG=$ENV_TAG" >> $GITHUB_ENV
          echo "BRANCH=$BRANCH" >> $GITHUB_OUTPUT
          echo "SHORT_SHA=$SHORT_SHA" >> $GITHUB_OUTPUT

          echo "::add-mask::${{ env.IMAGE_TAG }}"
          echo "::add-mask::${{ env.ENV_TAG }}"

      # 5. Docker 빌드 및 푸시
      - name: Build and push Docker image
        run: |
          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPOSITORY=tuning-nextjs

          echo "🏗️ Docker 이미지 빌드 시작..."

          docker build \
            --platform linux/amd64 \
            --cache-from=type=registry,ref=$ECR_REGISTRY/$REPOSITORY:$ENV_TAG \
            --cache-to=type=inline \
            --build-arg NEXT_PUBLIC_API_BASE_URL=${{ env.NEXT_PUBLIC_API_BASE_URL }} \
            -t $ECR_REGISTRY/$REPOSITORY:$IMAGE_TAG \
            .
          docker tag $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }} $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}

          echo "📤 Docker 이미지 푸시 중..."
          docker push $ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}
          docker push $ECR_REGISTRY/$REPOSITORY:${{ env.ENV_TAG }}

          echo "FULL_IMAGE=$ECR_REGISTRY/$REPOSITORY:${{ env.IMAGE_TAG }}" >> $GITHUB_ENV
          echo "FULL_IMAGE=$FULL_IMAGE" >> $GITHUB_OUTPUT
          echo "::add-mask::${{ env.FULL_IMAGE }}"

      # 6. 성공 알림
      - name: Notify Discord on Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"✅ [FE 도커 CI 성공] **${{ env.BRANCH }}** 브랜치\\n> 태그: ${{ env.IMAGE_TAG }}\\n> Commit: ${{ env.SHORT_SHA }}\\n> 이미지: ${{ env.FULL_IMAGE }}\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      # 7. 실패 알림
      - name: Notify Discord on Failure
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ [FE 도커 CI 실패] **${{ env.BRANCH }}** 브랜치\\n> Commit: ${{ env.SHORT_SHA }}\\n⚠️ [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

  frontend-cd:
    name: frontend Terraform CD
    needs: frontend-ci
    if: needs.frontend-ci.result == 'success'
    runs-on: ubuntu-latest
    env:
      BRANCH: ${{ needs.frontend-ci.outputs.BRANCH }}
      SHORT_SHA: ${{ needs.frontend-ci.outputs.SHORT_SHA }}
      IMAGE: ${{ needs.frontend-ci.outputs.FULL_IMAGE }}
    outputs:
      BRANCH: ${{ env.BRANCH }}
      ACTIVE: ${{ steps.active.outputs.active }}
      TARGET: ${{ steps.color.outputs.target }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

       # 3. ECR 로그인
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set environment variables from SSM
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }

          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=PROD" >> $GITHUB_ENV
            load_secret_to_file "/global/gcp/PROD_GCP_SA_KEY_DOCKER" gcp-sa-key.json
          else
            echo "ENV=DEV" >> $GITHUB_ENV
            load_secret_to_file "/global/gcp/DEV_GCP_SA_KEY_DOCKER" gcp-sa-key.json
          fi

          load_param "/global/GITHUB_TOKEN" GITHUB_TOKEN
          load_param "/global/TFC_TOKEN" TF_TOKEN_app_terraform_io

          ECR_REGISTRY=${{ steps.login-ecr.outputs.registry }}
          REPOSITORY=tuning-nextjs
          IMAGE_TAG="${BRANCH}-${SHORT_SHA}"

          echo "IMAGE=${ECR_REGISTRY}/${REPOSITORY}:${IMAGE_TAG}" >> $GITHUB_ENV

      - name: Checkout Terraform repo
        uses: actions/checkout@v3
        with:
          repository: 100-hours-a-week/2-hertz-cloud
          ref: develop
          path: tf-code
          token: ${{ env.GITHUB_TOKEN }}

      - name: Read GCP SA key JSON
        run: |
          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate to GCP
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ env.SA_KEY }}"

      - name: Setup gcloud CLI
        uses: google-github-actions/setup-gcloud@v1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.6.6   # <-- 본인 terraform 버전에 맞게 작성

      - name: Deploy to Dev Environment
        if: env.ENV == 'DEV'
        working-directory: tf-code/terraform/gcp/environments/develop
        run: |
          terraform init -reconfigure

          echo "{" > 01-deployment.auto.tfvars.json
          echo "  \"docker_image_front_blue\": \"${{ env.IMAGE }}\"" >> 01-deployment.auto.tfvars.json
          echo "}" >> 01-deployment.auto.tfvars.json

          cat 01-deployment.auto.tfvars.json

          terraform apply -auto-approve -target=module.frontend_ig

      - name: Check MIG Health (Dev)
        if: env.ENV == 'DEV'
        env:
          REGION: asia-east1 # DEV 환경에 맞게 수정
        run: |
          MIG_NAME="dev-fe-ig-a" # DEV MIG 이름으로 수정
          RETRY=10
          SLEEP_SEC=30

          echo "🩺 $MIG_NAME 인스턴스 헬스체크 시작..."
          sleep 60 # Wait for instances to initialize

          for i in $(seq 1 $RETRY); do
            echo "[$i/$RETRY] $MIG_NAME 인스턴스 상태 확인 중..."
            gcloud compute instance-groups managed list-instances "$MIG_NAME" --region="$REGION" --format="value(status,version.instanceTemplate,instanceHealth[0].detailedHealthState)" > states.txt
            cat states.txt

            HEALTHY_COUNT=$(grep -c "HEALTHY" states.txt || true)
            TOTAL_COUNT=$(wc -l < states.txt)

            if [ "$HEALTHY_COUNT" -eq "$TOTAL_COUNT" ] && [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "✅ 모든 인스턴스가 HEALTHY 상태입니다 ($HEALTHY_COUNT/$TOTAL_COUNT)."
              exit 0
            else
              echo "⏳ 준비된 인스턴스 ($HEALTHY_COUNT/$TOTAL_COUNT). ${SLEEP_SEC}s 대기..."
              sleep $SLEEP_SEC
            fi
          done

          echo "❌ ${RETRY}회 시도 후에도 MIG 인스턴스가 HEALTHY 상태가 아닙니다."
          exit 1

      - name: Get Active Deployment Color
        if: env.ENV == 'PROD'
        id: active
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
            set -euo pipefail # 에러 발생 시 즉시 종료, 정의되지 않은 변수 사용 금지

            terraform init -reconfigure

            # 셸의 리다이렉션이 더 확실하게 작동하도록 명령어를 명시적으로 묶어줍니다.
            # 또한, 표준 에러 출력을 무시하여 파일에 경고 메시지 등이 기록되지 않도록 합니다.
            (terraform output -json 2>/dev/null) > tf_outputs.json

            BLUE_MAX=$(jq -r '.blue_instance_count_frontend.value.max' tf_outputs.json)
            GREEN_MAX=$(jq -r '.green_instance_count_frontend.value.max' tf_outputs.json)
            if [ "$BLUE_MAX" = "0" ]; then
              echo "✅ Active deployment is GREEN"
              echo "active=green" >> $GITHUB_OUTPUT
            elif [ "$GREEN_MAX" = "0" ]; then
              echo "✅ Active deployment is BLUE"
              echo "active=blue" >> $GITHUB_OUTPUT
            else
              echo "⚠️ Both blue and green have non-zero max. Defaulting to blue"
              echo "active=blue" >> $GITHUB_OUTPUT
            fi

      - name: Determine Next Deployment Color
        if: env.ENV == 'PROD'
        id: color
        run: |
          if [ "${{ steps.active.outputs.active }}" = "green" ]; then
            echo "target=blue" >> $GITHUB_OUTPUT
          else
            echo "target=green" >> $GITHUB_OUTPUT
          fi

      - name: Get current backend values
        if: env.ENV == 'PROD'
        id: get_backend
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          terraform output -json > outputs.json

      - name: Write tfvars file for next deployment
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          ACTIVE=${{ steps.active.outputs.active }}
          TARGET=${{ steps.color.outputs.target }}

          BLUE_WEIGHT_BACKEND=$(jq '.traffic_weight_blue_backend.value' outputs.json)
          GREEN_WEIGHT_BACKEND=$(jq '.traffic_weight_green_backend.value' outputs.json)
          BLUE_COUNT_BACKEND=$(jq -c '.blue_instance_count_backend.value' outputs.json)
          GREEN_COUNT_BACKEND=$(jq -c '.green_instance_count_backend.value' outputs.json)

          echo "{" > 01-deployment.auto.tfvars.json
          echo "  \"traffic_weight_${ACTIVE}_frontend\": 100," >> 01-deployment.auto.tfvars.json
          echo "  \"traffic_weight_${TARGET}_frontend\": 0," >> 01-deployment.auto.tfvars.json
          echo "  \"docker_image_front_${TARGET}\": \"${{ env.IMAGE }}\"," >> 01-deployment.auto.tfvars.json
          echo "  \"${ACTIVE}_instance_count_frontend\": {\"min\": 1, \"max\": 2}," >> 01-deployment.auto.tfvars.json
          echo "  \"${TARGET}_instance_count_frontend\": {\"min\": 1, \"max\": 2}," >> 01-deployment.auto.tfvars.json
          echo "  \"traffic_weight_blue_backend\": ${BLUE_WEIGHT_BACKEND}," >> 01-deployment.auto.tfvars.json
          echo "  \"traffic_weight_green_backend\": ${GREEN_WEIGHT_BACKEND}," >> 01-deployment.auto.tfvars.json
          echo "  \"blue_instance_count_backend\": ${BLUE_COUNT_BACKEND}," >> 01-deployment.auto.tfvars.json
          echo "  \"green_instance_count_backend\": ${GREEN_COUNT_BACKEND}" >> 01-deployment.auto.tfvars.json
          echo "}" >> 01-deployment.auto.tfvars.json

          cat 01-deployment.auto.tfvars.json
          terraform apply -auto-approve -target=module.frontend_ig

      - name: Wait before health check
        if: env.ENV == 'PROD'
        run: |
          SLEEP_SEC=60
          echo "⏱ ${SLEEP_SEC}초 대기 중... 인스턴스 초기화 및 헬스체크 준비"
          sleep ${SLEEP_SEC}

      - name: Check MIG Health
        if: env.ENV == 'PROD'
        env:
          REGION: asia-east1
          TARGET: ${{ steps.color.outputs.target }}
        run: |
          MIG_NAME="prod-frontend-${TARGET}-b"
          RETRY=10
          SLEEP_SEC=30

          echo "🩺 $MIG_NAME 인스턴스 헬스체크 시작..."

          for i in $(seq 1 $RETRY); do
            echo "[$i/$RETRY] $MIG_NAME 인스턴스 상태 확인 중..."

            gcloud compute instance-groups managed list-instances "$MIG_NAME" \
              --region="$REGION" \
              --format="value(HEALTH_STATE)" > states.txt

            cat states.txt

            HEALTHY_COUNT=$(grep -c "HEALTHY" states.txt || true)
            TOTAL_COUNT=$(wc -l < states.txt)

            if [ "$HEALTHY_COUNT" -eq "$TOTAL_COUNT" ] && [ "$TOTAL_COUNT" -gt 0 ]; then
              echo "✅ 모든 인스턴스가 HEALTHY 상태입니다 ($HEALTHY_COUNT/$TOTAL_COUNT)."
              exit 0
            else
              echo "⏳ 준비된 인스턴스 ($HEALTHY_COUNT/$TOTAL_COUNT). ${SLEEP_SEC}s 대기..."
              sleep $SLEEP_SEC
            fi
          done

          echo "❌ ${RETRY}회 시도 후에도 MIG 인스턴스가 HEALTHY 상태가 아닙니다."
          exit 1

      - name: Write tfvars for shift traffic (half)
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          ACTIVE=${{ steps.active.outputs.active }}
          TARGET=${{ steps.color.outputs.target }}
          echo "{" > 02-shift-half.auto.tfvars.json
          echo "  \"traffic_weight_${ACTIVE}_frontend\": 50," >> 02-shift-half.auto.tfvars.json
          echo "  \"traffic_weight_${TARGET}_frontend\": 50" >> 02-shift-half.auto.tfvars.json
          echo "}" >> 02-shift-half.auto.tfvars.json
          terraform apply -auto-approve -target=module.frontend_ig

      - name: Write tfvars for shift traffic (full)
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          ACTIVE=${{ steps.active.outputs.active }}
          TARGET=${{ steps.color.outputs.target }}
          echo "{" > 03-shift-full.auto.tfvars.json
          echo "  \"traffic_weight_${ACTIVE}_frontend\": 0," >> 03-shift-full.auto.tfvars.json
          echo "  \"traffic_weight_${TARGET}_frontend\": 100" >> 03-shift-full.auto.tfvars.json
          echo "}" >> 03-shift-full.auto.tfvars.json
          terraform apply -auto-approve -target=module.frontend_ig

      - name: Scale Down Previous Environment
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          ACTIVE=${{ steps.active.outputs.active }}
          echo "{" > 04-scale-down.auto.tfvars.json
          echo "  \"${ACTIVE}_instance_count_frontend\": {\"min\":0, \"max\":0}" >> 04-scale-down.auto.tfvars.json
          echo "}" >> 04-scale-down.auto.tfvars.json
          terraform apply -auto-approve -target=module.frontend_ig

      - name: Notify Discord on Success
        if: success()
        run: |
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"✅ [FE 도커 CD 성공] **${{ env.BRANCH }}** 브랜치\\n> 이미지: ${{ env.IMAGE }}\\n> Commit: ${{ env.SHORT_SHA }}\\n\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Notify Discord on Failure
        if: failure()
        run: |
          WORKFLOW_URL="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"
          curl -H "Content-Type: application/json" \
              -X POST \
              -d "{\"content\": \"❌ [FE 도커 CD 실패] **${{ env.BRANCH }}** 브랜치\\n> 이미지: ${{ env.IMAGE }}\\n> Commit: ${{ env.SHORT_SHA }}\\n> ⚠️ [워크플로우 로그 보기]($WORKFLOW_URL)\"}" \
              ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

  frontend-rollback:
    name: frontend Terraform Rollback
    needs: frontend-cd
    if: always() && needs.frontend-cd.result != 'success'
    runs-on: ubuntu-latest
    env:
      BRANCH: ${{ needs.frontend-ci.outputs.BRANCH }}
      ACTIVE: ${{ needs.frontend-cd.outputs.ACTIVE }}
      TARGET: ${{ needs.frontend-cd.outputs.TARGET }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Set environment variables from SSM
        run: |
          load_param() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --query "Parameter.Value" --output text)
            echo "::add-mask::$VALUE"
            echo "$2=$VALUE" >> $GITHUB_ENV
          }

          load_secret_to_file() {
            VALUE=$(aws ssm get-parameter --name "$1" --with-decryption --output json | jq -r .Parameter.Value)

            echo "$VALUE" | while IFS= read -r line; do
              echo "::add-mask::$line"
            done

            echo "$VALUE" > "$2"
          }

          BRANCH="${{ github.ref_name }}"
          echo "BRANCH=$BRANCH" >> $GITHUB_ENV
          if [[ "$BRANCH" == "main" ]]; then
            echo "ENV=PROD" >> $GITHUB_ENV
            load_secret_to_file "/global/gcp/PROD_GCP_SA_KEY_DOCKER" gcp-sa-key.json
          else
            echo "ENV=DEV" >> $GITHUB_ENV
            load_secret_to_file "/global/gcp/DEV_GCP_SA_KEY_DOCKER" gcp-sa-key.json
          fi

          load_param "/global/GITHUB_TOKEN" GITHUB_TOKEN
          load_param "/global/TFC_TOKEN" TF_TOKEN_app_terraform_io

          if [ ${{ env.BRANCH }} = main ]; then
            echo "ENV=PROD" >> $GITHUB_ENV
          else
            echo "ENV=DEV" >> $GITHUB_ENV
          fi

      - name: Notify for Dev Rollback
        if: env.ENV == 'DEV'
        run: |
          echo "❗DEV 환경 배포에 실패했습니다."
          echo "❗DEV 환경은 Blue/Green 배포가 아니므로 자동 롤백 작업이 없습니다."
          echo "❗GCP 콘솔에서 'dev-frontend-b' Managed Instance Group의 상태를 직접 확인해주세요."

      - name: Checkout Terraform repo
        if: env.ENV == 'PROD'
        uses: actions/checkout@v3
        with:
          repository: 100-hours-a-week/2-hertz-cloud
          ref: develop
          path: tf-code
          token: ${{ env.GITHUB_TOKEN }}

      - name: Read GCP SA key JSON
        if: env.ENV == 'PROD'
        run: |
          echo "SA_KEY<<EOF" >> $GITHUB_ENV
          cat gcp-sa-key.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Authenticate to GCP
        if: env.ENV == 'PROD'
        uses: google-github-actions/auth@v1
        with:
          credentials_json: "${{ env.SA_KEY }}"

      - name: Send rollback start notification
        if: env.ENV == 'PROD'
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"🔄 [FE 도커 롤백 시작] \`(Docker) ${{ env.ENV }}\` 환경에서 롤백을 실행합니다.\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Get current backend values
        if: env.ENV == 'PROD'
        id: get_backend
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          terraform output -json > outputs.json

      - name: Write tfvars file for rollback
        if: env.ENV == 'PROD'
        working-directory: tf-code/terraform/gcp/environments/prod
        run: |
          terraform init -reconfigure

          ACTIVE=${{ env.ACTIVE }}
          TARGET=${{ env.TARGET }}

          BLUE_WEIGHT_BACKEND=$(jq '.traffic_weight_blue_backend.value' outputs.json)
          GREEN_WEIGHT_BACKEND=$(jq '.traffic_weight_green_backend.value' outputs.json)
          BLUE_COUNT_BACKEND=$(jq -c '.blue_instance_count_backend.value' outputs.json)
          GREEN_COUNT_BACKEND=$(jq -c '.green_instance_count_backend.value' outputs.json)

          echo "{" > 999-rollback.auto.tfvars.json
          echo "  \"traffic_weight_${ACTIVE}_frontend\": 100," >> 999-rollback.auto.tfvars.json
          echo "  \"traffic_weight_${TARGET}_frontend\": 0," >> 999-rollback.auto.tfvars.json
          echo "  \"${ACTIVE}_instance_count_frontend\": {\"min\": 1, \"max\": 2}," >> 999-rollback.auto.tfvars.json
          echo "  \"${TARGET}_instance_count_frontend\": {\"min\": 0, \"max\": 0}" >> 999-rollback.auto.tfvars.json
          echo "  \"traffic_weight_blue_backend\": ${BLUE_WEIGHT_BACKEND}," >> 999-rollback.auto.tfvars.json
          echo "  \"traffic_weight_green_backend\": ${GREEN_WEIGHT_BACKEND}," >> 999-rollback.auto.tfvars.json
          echo "  \"blue_instance_count_backend\": ${BLUE_COUNT_BACKEND}," >> 999-rollback.auto.tfvars.json
          echo "  \"green_instance_count_backend\": ${GREEN_COUNT_BACKEND}" >> 999-rollback.auto.tfvars.json
          echo "}" >> 999-rollback.auto.tfvars.json

          terraform apply -auto-approve -target=module.frontend_ig

      - name: Send success notification
        if: success() && env.ENV == 'PROD'
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"✅ [FE 도커 롤백 완료] \`(Docker) ${{ env.ENV }}\` 환경\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}

      - name: Send failure notification
        if: failure() && env.ENV == 'PROD'
        run: |
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"❌ [FE 도커 롤백 실패] \`(Docker) ${{ env.ENV }}\` 환경\"}" \
            ${{ secrets.DISCORD_WEBHOOK_CICD_URL }}
